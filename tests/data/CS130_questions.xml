<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 680032  -->
  <question type="coderunner">
    <name>
      <text>PROTOTYPE_python_refute</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">This is the Refute template.</p>
<p dir="ltr" style="text-align: left;">Global extra expects a gapfiller template with exactly three fields for `given`, `then`, `but` test cases respectively. For example:</p>
<p><code></code></p>
<pre><code>Calling no_even_pairs({[16]})
Should return: `{[8]}`
But the above function actually returns: `{[8]}`</code></pre>
<p>Test cases expects exactly one test case in the first slot, with `{[given]}`, `{[then]}`, `{[but]}` replacement fields. For example:</p>
<p><code></code></p>
<pre><code>def buggy(data):
	for i in range(len(data) - 1):
		if (data[i - 1] + data[i]) % 2 == 0:
			return False
	return True

def correct(data):
	for i in range(len(data) - 1):
		if (data[i] + data[i + 1]) % 2 == 0:
			return False
	return True

assert correct({[given]}) == {[then]}
assert buggy({[given]}) == {[but]}</code></pre>
<p>These fields are filled with the values the students type in, and the test case is then executed. If the test case exits without error, the case is correct. Otherwise, the question is incorrect with a message indicating the error. If an assertion error is raised, the student is informed that their cases are incorrect. Otherwise, they are told there was an error.<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>python_refute</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>3</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra>Calling no_even_pairs({[16]})
Should return: `{[8]}`
But the above function actually returns: `{[8]}`</globalextra>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[import json
import sys
from random import choices
from string import ascii_uppercase, digits
from subprocess import check_output, STDOUT, CalledProcessError


RAW_TESTCASES = json.loads("""{{ TESTCASES | json_encode | e('py') }}""")
RAW_ANSWER = json.loads("""{{ STUDENT_ANSWER | e('py') }}""")
RAW_PARAMS = json.loads("""{{ QUESTION.parameters | json_encode | e('py') }}""")


class TestCase:
    def __init__(self, code: str, given, then, but):
        self.secret = ''.join(choices(ascii_uppercase + digits, k=32))
        self.code = (
                code
                .replace("{[given]}", given)
                .replace("{[then]}", then)
                .replace("{[but]}", but)
                + f"""\n\n\nprint("{self.secret}", end='')"""
        )

    def run_raw(self):
        with open("prog.py", "w") as src:
            print(test.code, file=src)
        try:
            cmd = ["python3", "prog.py"]
            output = check_output(cmd, stderr=STDOUT, universal_newlines=True)
        except CalledProcessError as e:
            return 1, e.output
        else:
            return 0, output

    def run(self):
        status, output = self.run_raw()
        if status == 1 and output and output.strip().endswith("AssertionError"):
            return "AssertionError"
        elif status == 1 or not output.strip().endswith(test.secret):
            return "RuntimeError"
        else:
            return "Success"


def dump_output_and_quit(correct: bool, epilogue: str = "", exit_code: int = 0):
    banner = f"<h3>{'Success!' if correct else 'Incorrect'}</h3>"
    print(json.dumps({
        'fraction': int(correct),
        'testresults': [],
        'epiloguehtml': banner + epilogue,
        'columnformats': [],
        'showdifferences': False
    }))
    sys.exit(exit_code)


given, then, but = RAW_ANSWER
test = TestCase(RAW_TESTCASES[0]["testcode"], given, then, but)

if then.strip() == but.strip():
    dump_output_and_quit(
        False,
        "The expected and actual cases need to be different to reveal any bugs",
    )

match test.run():
    case "AssertionError":
        dump_output_and_quit(False, "Your given or example cases are incorrect")
    case "RuntimeError":
        dump_output_and_quit(False, "Your test case has caused an error", 1)
    case "Success":
        dump_output_and_quit(True)
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <allowmultiplestdins>0</allowmultiplestdins>
    <answer></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>TemplateGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin>gapfiller</uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
    </testcases>
  </question>

<!-- question: 681783  -->
  <question type="coderunner">
    <name>
      <text>Refute — With Index</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">A classmate has written the following function:</p>
<blockquote>
    <pre>def with_index(data):
    result = []
    for value in data:
        pair = (data.index(value), value)
        result.append(pair)
    return result</pre>
</blockquote>
<p>They claim the function takes a list of data and returns a list of tuples where each tuple contains the index of each value from the parameter list and the value itself: <code>(index, value)</code>. For example:</p>
<blockquote>
    <pre>with_index(["a", "b", "c"])</pre>
</blockquote>
<p>Returns:</p>
<blockquote>
    <pre>[(0, "a"), (1, "b"), (2, "c")]</pre>
</blockquote>
<p>There is a bug in their code – write a test case that reveals the bug.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>python_refute</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>3</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra>Calling with_index({[28]})
Should return: {[56]}
But the above function actually returns: {[56]}</globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>def buggy(data):
    result = []
    for value in data:
        pair = (data.index(value), value)
        result.append(pair)
    return result

def correct(data):
    result = []
    for i in range(len(data)):
        pair = (i, data[i])
        result.append(pair)
    return result

assert correct({[given]}) == {[then]}
assert buggy({[given]}) == {[but]}</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text></text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 680066  -->
  <question type="coderunner">
    <name>
      <text>refute: bring umbrella</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Your classmate wrote the following function that has three boolean parameters to help them decide whether they should take an umbrella with them:</p>
<blockquote>
    <pre>def take_umbrella(is_cloudy, is_raining, going_out):
    if is_cloudy or is_raining and going_out:
        return "Take an umbrella"
    else:
        return "Don't take an umbrella"</pre>
</blockquote>
<p></p>
<p>Your classmate will bring an umbrella with them if:<br></p>
<ul>
    <li>It is cloudy, or it is raining<br></li>
    <li>But only if they are going out for the day<br></li>
</ul>
<p>In all other cases, they will not take an umbrella with them.</p>
<p></p>
<p>There is a bug in their code – write a test case that reveals the bug. Remember to include quote marks around any strings.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>python_refute</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>3</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra>Calling `take_umbrella({[24]})`
Should return: {[25]}
But the above function actually returns: {[25]}</globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[def buggy(is_cloudy, is_raining, going_out):
    if is_cloudy or is_raining and going_out:
        return "Take an umbrella"
    else:
        return "Don't take an umbrella"

def correct(is_cloudy, is_raining, going_out):
    if (is_cloudy or is_raining) and going_out:
        return "Take an umbrella"
    else:
        return "Don't take an umbrella"

assert correct({[given]}).lower() == {[then]}.lower()
assert buggy({[given]}).lower() == {[but]}.lower()]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text></text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 680034  -->
  <question type="coderunner">
    <name>
      <text>refute: no pairs over 5</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">A classmate has written the following function:</p>
<blockquote>
    <pre>def no_large_pairs(data):
    for i in range(len(data)):
        if data[i - 1] + data[i] &gt; 5:
            return False
    return True</pre>
</blockquote>
<p>They claim the function returns <code>True</code> if there is no adjacent pair of numbers that sum to a value greater than five, and <code>False</code> otherwise.</p><p>There is a bug in their code – write a test case that reveals the bug.<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>python_refute</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>3</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra>Calling no_large_pairs({[16]})
Should return: {[8]}
But the above function actually returns: {[8]}</globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[def buggy(data):
    for i in range(len(data)):
        if data[i - 1] + data[i] > 5:
            return False
    return True

def correct(data):
    for i in range(len(data) - 1):
        if data[i] + data[i + 1] > 5:
            return False
    return True

assert correct({[given]}) == {[then]}
assert buggy({[given]}) == {[but]}]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text></text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 681788  -->
  <question type="coderunner">
    <name>
      <text>Reverse Trace — Gobble List</text>
    </name>
    <questiontext format="html">
      <text>Complete the following code to get the expected output in the example box below.</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>python3_html_gapfiller-1</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>11</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra>def gobble(data):
    result = []
    for i in range(0, len(data) - 1, 2):
        chomp = data[i] + data[i + 1]
        result.append(chomp)
    return result


values = {[42]}
result = gobble(values)
print(result)</globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>[7, 5, 3]</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 680035  -->
  <question type="coderunner">
    <name>
      <text>Reverse Trace: flip evens in list</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">Complete the following code to get the expected output in the example box below.<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>python3_html_gapfiller-1</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>5</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra>def munge(data):
    for i in range(len(data) // 2):
        if i % 2 == 0:
            data[i], data[-i - 1] = data[-i - 1], data[i]


data = {[45]}
munge(data)
print(data)</globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>['a', 'b', 'c', 'd', 'e', 'f', 'g']</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>


<!-- question: 0  -->
  <question type="category">
    <category>
      <text>$course$/top/Card Sorts</text>
    </category>
    <info format="html">
      <text></text>
    </info>
    <idnumber></idnumber>
  </question>

<!-- question: 595632  -->
  <question type="coderunner">
    <name>
      <text>Card Sort — Dict Result and Error Match</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Sort the code snippets from the leftmost panel (labelled <code>Cards</code>) into groups where all the cards in the same group produce <code>result</code> variables with the same value. Some of the cards, however, will raise an error; these cards should all be put into a separate group. For example, given the following three cards:</p>
<div style="max-width: 30ch; margin: auto">
    <pre style="border: 1px solid black; border-radius: 0.25em">data = {1: "a"}
result = data[1]</pre>
    <pre style="border: 1px solid black; border-radius: 0.25em">data = {}
data[2] = "a"
result = data[2]
</pre>
    <pre style="border: 1px solid black; border-radius: 0.25em">data = {"a": 1}
result = data["b"]</pre>
</div>
<p>The first two cards create a <code>result</code> value of <code>"a"</code>; therefore, they would both go into the same group. The third group, however, raises an error because <code>"b"</code> is not a key in the <code>data</code> dictionary, so it would need to go into a different group.<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>cardsort</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[{"cardsort":[{"groups":[{"title":"Cards","cards":[{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nresult = dict1.get(-1, \"x\")","preformatted":true},{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nresult = dict1[-1]","preformatted":true},{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nvalue = list(dict1.values())\nresult = value[1]","preformatted":true},{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nresult = dict1[2]","preformatted":true},{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nif \"b\" in dict1:\n    result = dict1[\"b\"]\nelse:\n    result = \"x\"","preformatted":true},{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nresult = dict1.get(2, \"x\")","preformatted":true},{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nresult = dict1[\"b\"]","preformatted":true}]},{"title":"Group 1","cards":[]},{"title":"Group 2","cards":[]},{"title":"Group 3","cards":[]}],"config":{"groupOrder":false,"groupWidth":"25"}}]}]]></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[{"cardsort":[{"groups":[{"title":"Cards","cards":[]},{"title":"Group 1","cards":[{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nresult = dict1.get(-1, \"x\")","preformatted":true},{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nif \"b\" in dict1:\n    result = dict1[\"b\"]\nelse:\n    result = \"x\"","preformatted":true}]},{"title":"Group 2","cards":[{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nvalue = list(dict1.values())\nresult = value[1]","preformatted":true},{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nresult = dict1[2]","preformatted":true},{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nresult = dict1.get(2, \"x\")","preformatted":true}]},{"title":"Group 3","cards":[{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nresult = dict1[-1]","preformatted":true},{"prompt":"dict1 = {1: \"a\", 2: \"b\", 3: \"c\"}\nresult = dict1[\"b\"]","preformatted":true}]}],"config":{"groupOrder":false,"groupWidth":"25"}}]}]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
    </testcases>
  </question>

<!-- question: 595641  -->
  <question type="coderunner">
    <name>
      <text>Card Sort — Dict Result Match</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Sort the code snippets from the leftmost panel (labelled <code>Cards</code>) into groups where all the cards in the same group create a dictionary (named <code>result</code>) with the same value. For example, given the following three cards:</p>
<div style="max-width: 30ch; margin: auto">
    <pre style="border: 1px solid black; border-radius: 0.25em">result = {1: "a"}</pre>
    <pre style="border: 1px solid black; border-radius: 0.25em">result = {}
result[1] = "a"</pre>
    <pre style="border: 1px solid black; border-radius: 0.25em">result = {"a": 1}</pre>
</div>
<p>The first two cards create a <code>result</code> dictionary equal to <code>{1: "a"}</code>; therefore, they would both go into the same group. The third group, however, has a different <code>result</code> dictionary, <code>{"a": 1}</code>, so it would need to go into a different group.<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>cardsort</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[{"cardsort":[{"groups":[{"title":"Cards","cards":[{"prompt":"data = [\n    (\"a\", 1), (\"b\", 1), (\"b\", 1),\n    (\"c\", 1), (\"c\", 1), (\"c\", 1),\n]\nresult = dict(data)","preformatted":true},{"prompt":"result = {\"a\": 1, \"b\": 2, \"c\": 3}","preformatted":true},{"prompt":"result = {1: \"a\", 2: \"bb\", 3: \"ccc\"}","preformatted":true},{"prompt":"dict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\nresult = {}\nfor key in dict1:\n    value = dict1[key]\n    result[value] = key * value","preformatted":true},{"prompt":"alph = \"abcdefghijklmnopqrstuvwxyz\"\nresult = {}\nfor char in \"cab\":\n    result[char] = alph.index(char) + 1","preformatted":true},{"prompt":"string = \"abc\"\nresult = {}\nfor char in string:\n    result[char] = string.count(char)","preformatted":true},{"prompt":"result = {\"a\": 0, \"b\": 0, \"c\": 0}\nstring = \"abcbcc\"\nfor char in string:\n    result[char] += 1","preformatted":true}]},{"title":"Group 1","cards":[]},{"title":"Group 2","cards":[]},{"title":"Group 3","cards":[]}],"config":{"groupOrder":false,"groupWidth":"25"}}]}]]></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[{"cardsort":[{"groups":[{"title":"Cards","cards":[]},{"title":"Group 1","cards":[{"prompt":"data = [\n    (\"a\", 1), (\"b\", 1), (\"b\", 1),\n    (\"c\", 1), (\"c\", 1), (\"c\", 1),\n]\nresult = dict(data)","preformatted":true},{"prompt":"string = \"abc\"\nresult = {}\nfor char in string:\n    result[char] = string.count(char)","preformatted":true}]},{"title":"Group 2","cards":[{"prompt":"result = {\"a\": 1, \"b\": 2, \"c\": 3}","preformatted":true},{"prompt":"result = {\"a\": 0, \"b\": 0, \"c\": 0}\nstring = \"abcbcc\"\nfor char in string:\n    result[char] += 1","preformatted":true},{"prompt":"alph = \"abcdefghijklmnopqrstuvwxyz\"\nresult = {}\nfor char in \"cab\":\n    result[char] = alph.index(char) + 1","preformatted":true}]},{"title":"Group 3","cards":[{"prompt":"result = {1: \"a\", 2: \"bb\", 3: \"ccc\"}","preformatted":true},{"prompt":"dict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\nresult = {}\nfor key in dict1:\n    value = dict1[key]\n    result[value] = key * value","preformatted":true}]}],"config":{"groupOrder":false,"groupWidth":"25"}}]}]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
    </testcases>
  </question>

<!-- question: 595634  -->
  <question type="coderunner">
    <name>
      <text>Card Sort — Functional Equivalence</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">Put the functions below into groups based on functional equivalence – that is, all the functions in a group will produce the same outputs for any given input.</p><p dir="ltr" style="text-align: left;"><strong>Notes:</strong><br></p><ul><li>Assume the functions are only given any single list of numbers as a parameter.</li><li>Ignore any differences due to floating point error.</li><li>Assume the math module has been imported.<br></li></ul>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>cardsort</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[{"cardsort":[{"groups":[{"title":"Cards","cards":[{"prompt":"def foo(data):\n    return [n ** 2 for n in data if n >= 0]","preformatted":true},{"prompt":"def foo(data):\n    result = 1\n    i = 0\n    while i < len(data):\n        if data[i] >= 0:\n            result *= data[i]\n        i += 1\n    return result","preformatted":true},{"prompt":"def foo(numbers):\n    result = 1\n    for number in numbers:\n        result *= number * number\n    return result","preformatted":true},{"prompt":"def foo(values):\n    result = []\n    for element in values:\n        if element >= 0:\n            result.append(element * element)\n    return result","preformatted":true},{"prompt":"def foo(values):\n    values = [n for n in values if n >= 0]\n    return math.prod(values)","preformatted":true},{"prompt":"def foo(values):\n    result = 1\n    for number in values:\n        if number >= 0:\n            result *= number\n    return result","preformatted":true}]},{"title":"Group 1","cards":[]},{"title":"Group 2","cards":[]},{"title":"Group 3","cards":[]}],"config":{"groupOrder":false,"groupWidth":"25"}}]}]]></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[{"cardsort":[{"groups":[{"title":"Cards","cards":[]},{"title":"Group 1","cards":[{"prompt":"def foo(data):\n    return [n ** 2 for n in data if n >= 0]","preformatted":true},{"prompt":"def foo(values):\n    result = []\n    for element in values:\n        if element >= 0:\n            result.append(element * element)\n    return result","preformatted":true}]},{"title":"Group 2","cards":[{"prompt":"def foo(data):\n    result = 1\n    i = 0\n    while i < len(data):\n        if data[i] >= 0:\n            result *= data[i]\n        i += 1\n    return result","preformatted":true},{"prompt":"def foo(values):\n    values = [n for n in values if n >= 0]\n    return math.prod(values)","preformatted":true},{"prompt":"def foo(values):\n    result = 1\n    for number in values:\n        if number >= 0:\n            result *= number\n    return result","preformatted":true}]},{"title":"Group 3","cards":[{"prompt":"def foo(numbers):\n    result = 1\n    for number in numbers:\n        result *= number * number\n    return result","preformatted":true}]}],"config":{"groupOrder":false,"groupWidth":"25"}}]}]]></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
    </testcases>
  </question>

<!-- question: 595654  -->
  <question type="coderunner">
    <name>
      <text>Card Sort — Identify Possible Exceptions</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Put the functions into groups based on the possible exception types <span data-olk-copy-source="MessageBody">they may raise</span> for any given parameters.</p>
<p>Assume the parameter names indicate the type of the parameter:</p>
<ul>
    <li><code>nums</code>, <code>numbers</code>, and <code>vals</code> refer to lists of ints<br></li>
    <li><code>num_tuple</code> refers to a tuple of ints<br></li>
    <li><code>word</code> refers to a string</li>
    <li><code>n_slices</code>, <code>n_people</code>, and <code>n</code> refer to ints<br></li>
</ul>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>cardsort</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[{"cardsort":[{"groups":[{"title":"Cards","cards":[{"prompt":"def sum_up_to_n():\n    n = input(\"n: \")\n    return n * (n + 1) / 2","preformatted":true},{"prompt":"def remove_evens(vals):\n    for i in range(len(vals) - 1, -1, -1):\n        num = vals[i]\n        if num % 2 == 0:\n            vals.pop(num)","preformatted":true},{"prompt":"def double_tuple(num_tuple):\n    sorted_nums = sorted(num_tuple)\n    return num_tuple + sorted_nums","preformatted":true},{"prompt":"def pairwise_sums(numbers):\n    result = []\n    for i in range(len(numbers)):\n        pair = numbers[i] + numbers[i + 1]\n        result.append(pair)\n    return result","preformatted":true},{"prompt":"def mean_of_evens(nums):\n    nums = [e for e in nums if e % 2 == 0]\n    return sum(nums) / len(nums)","preformatted":true},{"prompt":"def min_divisible_by_3(nums):\n    nums = [e for e in nums if e % 3 == 0]\n    return min(nums)","preformatted":true},{"prompt":"def remaining_slices(n_slices, n_people):\n    return n_people % n_slices","preformatted":true},{"prompt":"def vowel_ratio(word):\n    word = word.lower()\n    vowels = 0\n    for vowel in \"aeiou\":\n        vowels += word.count(vowel)\n    return vowels / len(word)","preformatted":true},{"prompt":"def sum_up_to_n():\n    n = int(input(\"n: \"))\n    return n * (n + 1) / 2","preformatted":true}]},{"title":"TypeError","cards":[]},{"title":"ValueError","cards":[]},{"title":"IndexError","cards":[]},{"title":"ZeroDivisionError","cards":[]}],"config":{"groupOrder":true,"groupWidth":"25"}}]}]]></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[{"cardsort":[{"groups":[{"title":"Cards","cards":[]},{"title":"TypeError","cards":[{"prompt":"def sum_up_to_n():\n    n = input(\"n: \")\n    return n * (n + 1) / 2","preformatted":true},{"prompt":"def double_tuple(num_tuple):\n    sorted_nums = sorted(num_tuple)\n    return num_tuple + sorted_nums","preformatted":true}]},{"title":"ValueError","cards":[{"prompt":"def min_divisible_by_3(nums):\n    nums = [e for e in nums if e % 3 == 0]\n    return min(nums)","preformatted":true},{"prompt":"def sum_up_to_n():\n    n = int(input(\"n: \"))\n    return n * (n + 1) / 2","preformatted":true}]},{"title":"IndexError","cards":[{"prompt":"def remove_evens(vals):\n    for i in range(len(vals) - 1, -1, -1):\n        num = vals[i]\n        if num % 2 == 0:\n            vals.pop(num)","preformatted":true},{"prompt":"def pairwise_sums(numbers):\n    result = []\n    for i in range(len(numbers)):\n        pair = numbers[i] + numbers[i + 1]\n        result.append(pair)\n    return result","preformatted":true}]},{"title":"ZeroDivisionError","cards":[{"prompt":"def mean_of_evens(nums):\n    nums = [e for e in nums if e % 2 == 0]\n    return sum(nums) / len(nums)","preformatted":true},{"prompt":"def remaining_slices(n_slices, n_people):\n    return n_people % n_slices","preformatted":true},{"prompt":"def vowel_ratio(word):\n    word = word.lower()\n    vowels = 0\n    for vowel in \"aeiou\":\n        vowels += word.count(vowel)\n    return vowels / len(word)","preformatted":true}]}],"config":{"groupOrder":true,"groupWidth":"25"}}]}]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
    </testcases>
  </question>

<!-- question: 595639  -->
  <question type="coderunner">
    <name>
      <text>Card Sort — Test Case Match</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">The cards below consist of function descriptions, functions, and test cases — these describe one of three different problems. Put the cards into groups based on which problem they solve.<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>cardsort</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[{"cardsort":[{"groups":[{"title":"Cards","cards":[{"prompt":"Returns a list of even values from the parameter list","preformatted":false},{"prompt":"Takes a list of integers and maps it to a list of booleans based on whether each number is even","preformatted":false},{"prompt":"Returns all numbers up to but not including the first even number","preformatted":false},{"prompt":"def foo(values):\n    result = []\n    for number in values:\n        result.append(number % 2 == 0)\n    return result","preformatted":true},{"prompt":"def foo(data):\n    result = []\n    for value in data:\n        if value % 2 == 0:\n            return result\n        result.append(value)\n    return result","preformatted":true},{"prompt":"def foo(numbers):\n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(num)\n    return result","preformatted":true},{"prompt":"def foo(data):\n    return [elt % 2 == 0 for elt in data]","preformatted":true},{"prompt":"def foo(data):\n    return [e for e in data if e % 2 == 0]","preformatted":true},{"prompt":"def foo(data):\n    result = []\n    i = 0\n    while i < len(data) and data[i] % 2 != 0:\n        result.append(data[i])\n        i += 1\n    return result","preformatted":true},{"prompt":"foo([1, 2, 3, 4]) == [2, 4]","preformatted":true},{"prompt":"foo([2]) == []","preformatted":true},{"prompt":"foo([2]) == [True]","preformatted":true},{"prompt":"foo([1, 2, 3, 4]) == [1]","preformatted":true},{"prompt":"foo([1, 2, 3]) == [False, True, False]","preformatted":true},{"prompt":"foo([2]) == [2]","preformatted":true}]},{"title":"Group 1","cards":[]},{"title":"Group 2","cards":[]},{"title":"Group 3","cards":[]}],"config":{"groupOrder":false,"groupWidth":"25"}}]}]]></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[{"cardsort":[{"groups":[{"title":"Cards","cards":[]},{"title":"Group 1","cards":[{"prompt":"Returns a list of even values from the parameter list","preformatted":false},{"prompt":"def foo(numbers):\n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(num)\n    return result","preformatted":true},{"prompt":"def foo(data):\n    return [e for e in data if e % 2 == 0]","preformatted":true},{"prompt":"foo([1, 2, 3, 4]) == [2, 4]","preformatted":true},{"prompt":"foo([2]) == [2]","preformatted":true}]},{"title":"Group 2","cards":[{"prompt":"Takes a list of integers and maps it to a list of booleans based on whether each number is even","preformatted":false},{"prompt":"def foo(values):\n    result = []\n    for number in values:\n        result.append(number % 2 == 0)\n    return result","preformatted":true},{"prompt":"def foo(data):\n    return [elt % 2 == 0 for elt in data]","preformatted":true},{"prompt":"foo([2]) == [True]","preformatted":true},{"prompt":"foo([1, 2, 3]) == [False, True, False]","preformatted":true}]},{"title":"Group 3","cards":[{"prompt":"Returns all numbers up to but not including the first even number","preformatted":false},{"prompt":"def foo(data):\n    result = []\n    for value in data:\n        if value % 2 == 0:\n            return result\n        result.append(value)\n    return result","preformatted":true},{"prompt":"def foo(data):\n    result = []\n    i = 0\n    while i < len(data) and data[i] % 2 != 0:\n        result.append(data[i])\n        i += 1\n    return result","preformatted":true},{"prompt":"foo([2]) == []","preformatted":true},{"prompt":"foo([1, 2, 3, 4]) == [1]","preformatted":true}]}],"config":{"groupOrder":false,"groupWidth":"25"}}]}]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
    </testcases>
  </question>

<!-- question: 595629  -->
  <question type="description">
    <name>
      <text>Card Sort Descripton</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">We are trying out a new <em>card sorting</em><span> question type that requires putting cards into groups. We are interested to know how you find these exercises and whether there are any improvements we can make.</span></p><p dir="ltr" style="text-align: left;">When doing the card sorts, it may be easiest to click the "Fullscreen" button so you have more space to work on them.<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>0.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
  </question>

<!-- question: 595642  -->
  <question type="essay">
    <name>
      <text>Card Sort — Written Feedback</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">If you have any feedback about the above card sort, please let us know:<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <responseformat>plain</responseformat>
    <responserequired>0</responserequired>
    <responsefieldlines>2</responsefieldlines>
    <minwordlimit>0</minwordlimit>
    <maxwordlimit>0</maxwordlimit>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxbytes>0</maxbytes>
    <filetypeslist></filetypeslist>
    <graderinfo format="html">
      <text></text>
    </graderinfo>
    <responsetemplate format="html">
      <text></text>
    </responsetemplate>
  </question>

<!-- question: 595644  -->
  <question type="essay">
    <name>
      <text>Card Sort — Written Feedback (copy)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">If you have any feedback about the above card sort, please let us know:<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <responseformat>plain</responseformat>
    <responserequired>0</responserequired>
    <responsefieldlines>2</responsefieldlines>
    <minwordlimit></minwordlimit>
    <maxwordlimit></maxwordlimit>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxbytes>0</maxbytes>
    <filetypeslist></filetypeslist>
    <graderinfo format="html">
      <text></text>
    </graderinfo>
    <responsetemplate format="html">
      <text></text>
    </responsetemplate>
  </question>

<!-- question: 595628  -->
  <question type="multichoice">
    <name>
      <text>Card Sort — Feedback</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">The above question was:<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <single>true</single>
    <shuffleanswers>false</shuffleanswers>
    <answernumbering>none</answernumbering>
    <showstandardinstruction>0</showstandardinstruction>
    <correctfeedback format="html">
      <text>Your answer is correct.</text>
    </correctfeedback>
    <partiallycorrectfeedback format="html">
      <text>Your answer is partially correct.</text>
    </partiallycorrectfeedback>
    <incorrectfeedback format="html">
      <text>Your answer is incorrect.</text>
    </incorrectfeedback>
    <shownumcorrect/>
    <answer fraction="100" format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">1 — Too Easy<br></p>]]></text>
      <feedback format="html">
        <text></text>
      </feedback>
    </answer>
    <answer fraction="100" format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">2<br></p>]]></text>
      <feedback format="html">
        <text></text>
      </feedback>
    </answer>
    <answer fraction="100" format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">3 — OK<br></p>]]></text>
      <feedback format="html">
        <text></text>
      </feedback>
    </answer>
    <answer fraction="100" format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">4<br></p>]]></text>
      <feedback format="html">
        <text></text>
      </feedback>
    </answer>
    <answer fraction="100" format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">5 — Too Hard<br></p>]]></text>
      <feedback format="html">
        <text></text>
      </feedback>
    </answer>
  </question>

<!-- question: 595643  -->
  <question type="multichoice">
    <name>
      <text>Card Sort — Feedback (copy)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">The above question was:<br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <single>true</single>
    <shuffleanswers>false</shuffleanswers>
    <answernumbering>none</answernumbering>
    <showstandardinstruction>0</showstandardinstruction>
    <correctfeedback format="html">
      <text>Your answer is correct.</text>
    </correctfeedback>
    <partiallycorrectfeedback format="html">
      <text>Your answer is partially correct.</text>
    </partiallycorrectfeedback>
    <incorrectfeedback format="html">
      <text>Your answer is incorrect.</text>
    </incorrectfeedback>
    <shownumcorrect/>
    <answer fraction="100" format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">1 — Too Easy<br></p>]]></text>
      <feedback format="html">
        <text></text>
      </feedback>
    </answer>
    <answer fraction="100" format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">2<br></p>]]></text>
      <feedback format="html">
        <text></text>
      </feedback>
    </answer>
    <answer fraction="100" format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">3 — OK<br></p>]]></text>
      <feedback format="html">
        <text></text>
      </feedback>
    </answer>
    <answer fraction="100" format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">4<br></p>]]></text>
      <feedback format="html">
        <text></text>
      </feedback>
    </answer>
    <answer fraction="100" format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">5 — Too Hard<br></p>]]></text>
      <feedback format="html">
        <text></text>
      </feedback>
    </answer>
  </question>

<!-- question: 0  -->
  <question type="category">
    <category>
      <text>$course$/top/Card Sorts/Prototypes</text>
    </category>
    <info format="html">
      <text></text>
    </info>
    <idnumber></idnumber>
  </question>

<!-- question: 596485  -->
  <question type="coderunner">
    <name>
      <text>PROTOTYPE_cardsort</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[Card sort refactor<br>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>cardsort</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>5</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[{"cardsort":[{"groups":[{"title":"Group A","cards":[{"prompt":"This is a card with some text\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines","preformatted":true},{"prompt":"The young woman at the next table is wearing a long purple dress, and I consider inviting her to join me for lunch. This invitation will surely be declined, nor would I be tempted to extend it under any other circumstances. But the intensity and saturation of that purple make her a public figure, in spite of her obvious self-absorption.","preformatted":false},{"prompt":"size = 7\nsize //= 2\nfor i in range(-size, size + 1):\n    for j in range(-size, size + 1):\n        if abs(i) == abs(j) or i == 0 or j == 0:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()","preformatted":true},{"prompt":"Another card!","preformatted":true},{"prompt":"More cards\n\nWith text!","preformatted":false},{"prompt":"fghdjghjgf","preformatted":true},{"prompt":"abc","preformatted":true},{"prompt":"rgjkldhl","preformatted":true}]},{"title":"Group B","cards":[]},{"title":"Group C","cards":[]},{"title":"Group D","cards":[]},{"title":"Group E","cards":[]}],"config":{"groupOrder":true,"groupWidth":"41"}}]}]]></answerpreload>
    <globalextra></globalextra>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[import json
import math
import sys
from collections.abc import Mapping
from pprint import pformat

from munkres import Munkres, make_cost_matrix


def dump_output_and_quit(mark: float, epilogue: str, exit_code: int = 0):
    outcome = {
        'fraction': mark,
        'testresults': [],
        'epiloguehtml': epilogue,
        'columnformats': [],
        'showdifferences': False
    }
    print(json.dumps(outcome))
    sys.exit(exit_code)


def prompt_set(group):
    """{"cards": [{"prompt": "prompt", ...}, ...] -> {"prompt", ...}}"""
    return {card["prompt"] for card in group["cards"]}


def title_map(groups):
    """
    [{"title": "title", "cards": [{"prompt": "prompt", ...}, ...]}, ...]
    -> {"title": {"prompt", ...}}
    """
    group_map = {}
    for group in groups:
        title = group["title"]
        cards = prompt_set(group)
        group_map[title] = cards
    return group_map


def edit_distance_ordered(student_groups, answer_groups):
    answer = title_map(answer_groups)
    student = title_map(student_groups)
    if len(answer_groups) != len(answer) or len(student_groups) != len(student):
        raise ValueError("Groups cannot have duplicate titles if order matters")
    distance = 0
    for title, cards in answer.items():
        student_cards = student[title]
        distance += len(cards - student_cards)
    return distance


def edit_distance_unordered(student_groups, answer_groups):
    """
    Returns the edit distance between two Sorts using the method described by
    Deibel et al.

    **See:** Deibel, K., Anderson, R., & Anderson, R. (2005). Using edit
    distance to analyze card sorts. Expert Systems, 22(3), 129-138.
    """
    sort1 = [prompt_set(group) for group in answer_groups]
    sort2 = [prompt_set(group) for group in student_groups]

    matching_weights = [[] for _ in range(len(sort1))]
    for i, group1 in enumerate(sort1):
        for group2 in sort2:
            intersection = len(group1 & group2)
            matching_weights[i].append(intersection)

    cost_matrix = make_cost_matrix(matching_weights)

    running_sum = 0
    for row, col in Munkres().compute(cost_matrix):
        running_sum += matching_weights[row][col]

    return len([c for group in sort1 for c in group]) - running_sum


def parse(data: str) -> Mapping:
    """
    data is of the form::
        {
            "cardsort": [{
                "groups": [
                    {"title": "...",
                     "cards": [{"prompt": "...", "preformatted": true/false}]},
                ],
                "config": {"groupOrder": true/false}
            }]
        }

    where "cardsort" only contains one item
    """
    return json.loads(data)["cardsort"][0]


def remove_unsorted_cards(groups):
    """Removes any group named "cards" (case-insensitive)"""
    return [group for group in groups if group["title"].lower() != "cards"]


def pluralise(count, singular, plural):
    return singular if count == 1 else plural


def main():
    student_answer = parse("""{{ STUDENT_ANSWER | e('py') }}""")
    question_answer = parse("""{{ QUESTION.answer | e('py') }}""")
    question_preload = parse("""{{ QUESTION.answerpreload | e('py') }}""")

    is_ordered = question_answer["config"]["groupOrder"]

    if is_ordered:
        # I think I can just replace this with the number of cards
        # but have not done the math
        student_groups = student_answer["groups"]
        answer_groups = question_answer["groups"]
        preload_groups = question_preload["groups"]
        max_distance = edit_distance_ordered(preload_groups, answer_groups)
        distance = edit_distance_ordered(student_groups, answer_groups)
    else:
        student_groups = remove_unsorted_cards(student_answer["groups"])
        answer_groups = question_answer["groups"]
        preload_groups = remove_unsorted_cards(question_preload["groups"])
        max_distance = edit_distance_unordered(preload_groups, answer_groups)
        distance = edit_distance_unordered(student_groups, answer_groups)

    scaled_dist = max(0.0, 1 - (distance / max_distance))

    if math.isclose(scaled_dist, 1.0):
        feedback = "<h3>Correct</h3>"
    else:
        cards = pluralise(distance, "card", "cards")
        are = pluralise(distance, "is", "are")
        feedback = "\n".join((
            "<h3>Incorrect</h3>",
            f"<p>{distance} {cards} {are} out of place.</p>"
        ))

    # feedback = f"""
    # <p>Distance: {distance}</p>
    # <p>Max Distance: {max_distance}</p>
    # <p>Scaled Distance: {scaled_dist:.2f}</p>
    #
    # <h3>This Submission:</h3>
    # <pre>{pformat(student_answer)}</pre>
    #
    # <h3>Question Answer:</h3>
    # <pre>{pformat(question_answer)}</pre>
    # """

    dump_output_and_quit(scaled_dist, feedback)


main()
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <allowmultiplestdins>0</allowmultiplestdins>
    <answer><![CDATA[{"cardsort":[{"groups":[{"title":"Group A","cards":[{"prompt":"The young woman at the next table is wearing a long purple dress, and I consider inviting her to join me for lunch. This invitation will surely be declined, nor would I be tempted to extend it under any other circumstances. But the intensity and saturation of that purple make her a public figure, in spite of her obvious self-absorption.","preformatted":false},{"prompt":"abc","preformatted":true},{"prompt":"rgjkldhl","preformatted":true},{"prompt":"This is a card with some text\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines","preformatted":true},{"prompt":"size = 7\nsize //= 2\nfor i in range(-size, size + 1):\n    for j in range(-size, size + 1):\n        if abs(i) == abs(j) or i == 0 or j == 0:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()","preformatted":true},{"prompt":"Another card!","preformatted":true},{"prompt":"More cards\n\nWith text!","preformatted":false},{"prompt":"fghdjghjgf","preformatted":true}]},{"title":"Group B","cards":[]},{"title":"Group C","cards":[]},{"title":"Group D","cards":[]},{"title":"Group E","cards":[]}],"config":{"groupOrder":true,"groupWidth":"41"}}]}]]></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>TemplateGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin>html</uiplugin>
    <uiparameters><![CDATA[{"html_src": "prototypeextra"}]]></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Card Sort Question</title>
  <style>
    :root {
      --CR-top-bar-colour: #5985a1;
      --CR-group-colour: #b2d5eb;
      --CR-background-colour: #fbf7f4;
      --CR-sortable-colour: rgba(255, 255, 255, 0.6);
    }

    .ui-sortable-helper * {
      z-index: 2 !important;
    }

    .qtype-coderunner-html-outer-div {
      height: 100% !important;
      min-height: 100% !important;
    }

    div[id$="answer_wrapper"].ui_wrapper,
    div[id$="answerpreload_wrapper"].ui_wrapper {
      min-height: 750px !important;
      height: 750px;
    }

    .CR-answerbox {
      /* flex is applied to the active answerbox */
      height: 100%;
      background-color: white;
      box-sizing: border-box;
      flex-direction: column;
      position: relative;
    }

    .CR-top-bar {
      display: flex;
      gap: 1rem;
      flex-direction: row-reverse;
      background-color: var(--CR-top-bar-colour);
      align-items: center;
      padding: 0 0.5rem;
      height: 2.6rem;
    }

    .CR-content {
      flex-grow: 1;
      position: relative;
      height: calc(100% - 2.6rem);
    }

    .CR-content .CR-left-shadow,
    .CR-content .CR-right-shadow {
      content: "";
      pointer-events: none;

      position: absolute;
      left: 0;
      top: 0;
      right: 0;
      bottom: 0;

      z-index: 1;
    }

    .CR-answerbox textarea {
      line-height: 1.2;
    }

    .CR-group-header-bar input {
      width: 100%;
    }

    .CR-add-card {
      min-width: 9ch;
    }

    .CR-group-container {
      height: 100%;
      overflow: auto;
      display: flex;
      flex-direction: column;
      position: relative;
      background-color: var(--CR-background-colour);
    }

    .CR-visible-groups-box {
      position: absolute;
      left: 0;
      top: 0;
      right: 0;
      bottom: 0;
      pointer-events: none;
    }

    .CR-groups {
      width: fit-content;
      display: flex;
      gap: 1rem;
      flex-grow: 1;
    }

    .CR-groups > :first-child {
      position: sticky;
      left: 0;
      margin: 0;
      border-radius: 0;
      padding-top: 1rem;
      z-index: 2;
    }

    .CR-group {
      border-radius: 0.25rem;
      padding: 0.5rem;
      display: flex;
      flex-direction: column;
      background-color: var(--CR-group-colour);
      margin-top: 0.5rem;
      margin-bottom: 0.5rem;
    }

    .CR-group-card-container {
      flex-grow: 1;
      /*overflow: auto;*/
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      border-radius: 0.25rem;
      padding: 0.3rem;
      height: 100%;
      background-color: var(--CR-sortable-colour);
      position: relative;
    }

    .CR-group-header-bar {
      display: flex;
      flex-direction: row;
    }

    .CR-group-header-bar input {
      flex-grow: 1;
    }

    .CR-card {
      padding: 0.25rem;
      border-radius: 0.25rem;
      background-color: white;
      border: 1px solid black;
      cursor: grab;
      position: relative;
    }

    .CR-card-buttons {
      display: flex;
      gap: 0.5rem;
    }

    .CR-preformat-checkbox-group,
    .CR-group-order-checkbox-group,
    .CR-group-width-input-group {
      border: 1px solid black;
      display: flex;
      padding: 0 0.25rem;
      gap: 0.5rem;
    }

    .CR-group-width-input-group input {
      width: 8ch;
    }

    .CR-prompt {
      margin: 0;
      font-size: 0.95rem;
    }

    p.CR-prompt {
      white-space: pre-wrap;
    }

    .CR-preload-warning p {
      margin: 0.2rem;
      text-align: center;
      font-weight: bold;
    }


    .CR-cardsort-fullscreen-button {
      background-color: white;
      border: 1px solid black;
      border-radius: 0.2rem;
      padding: 0.2rem 1rem;
    }
  </style>
</head>
<body>

<div id="CR-student-answer-___textareaId___" class="CR-answerbox" style="display: none">
  <div class="CR-top-bar">
    <button class="CR-cardsort-fullscreen-button">Fullscreen</button>
    <button class="CR-add-group-button">Add Group</button>
  </div>
  <div class="CR-content">
    <div class="CR-left-shadow"></div>
    <div class="CR-right-shadow"></div>
    <div class="CR-group-container">
      <div class="CR-visible-groups-box"></div>
      <div class="CR-groups"></div>
    </div>
  </div>
</div>

<div id="CR-answer-authoring-___textareaId___" class="CR-answerbox" style="display: none">
  <div class="CR-top-bar">
    <h3>Answer</h3>
    <button class="CR-cardsort-fullscreen-button">Fullscreen</button>
    <button class="CR-add-group-button">Add Group</button>
  </div>
  <div class="CR-content">
    <div class="CR-left-shadow"></div>
    <div class="CR-right-shadow"></div>
    <div class="CR-group-container">
      <div class="CR-visible-groups-box"></div>
      <div class="CR-groups"></div>
    </div>
  </div>
</div>

<div id="CR-preload-authoring-___textareaId___" class="CR-answerbox" style="display: none">
  <div class="CR-preload-warning">
    <p><em>NOTE:
      <em>ANY</em> added or edited cards/groups in the preload will reset the answer on save</em>
    </p>
  </div>
  <div class="CR-top-bar">
    <h3>Preload</h3>
    <button class="CR-cardsort-fullscreen-button">Fullscreen</button>
    <button class="CR-add-group-button">Add Group</button>
    <div class="CR-group-order-checkbox-group">
      <label for="ordered">Group Order Matters</label>
      <input id="ordered" type="checkbox" name="ordered"/>
    </div>
    <div class="CR-group-width-input-group">
      <label for="group-width">Group Width</label>
      <input id="group-width" type="number" name="group-width" value="25"/>
    </div>
  </div>
  <div class="CR-content">
    <div class="CR-left-shadow"></div>
    <div class="CR-right-shadow"></div>
    <div class="CR-group-container">
      <div class="CR-visible-groups-box"></div>
      <div class="CR-groups"></div>
    </div>
  </div>
</div>


<script>
  //# sourceURL=Cardsorting.js
  require(['jquery', 'jqueryui'], function ($, jqui) {

    // THANK YOU Alconja
    // https://stackoverflow.com/a/4372419/18307756
    (function ($, undefined) {
      $.widget("ui.fixedSortable", $.ui.sortable, {
        _init: function () {
          this.element.data("sortable", this.element.data("fixedSortable"));
          return $.ui.sortable.prototype._init.apply(this, arguments);
        },
        _create: function () {
          var result = $.ui.sortable.prototype._create.apply(this, arguments);
          this.containerCache.sortable = this;
          return result;
        },
        _intersectsWithPointer: function (item) {
          // console.log(item)
          // console.log(this)
          if (!item.instance.element.hasClass("main-list")) {
            let $main = $(item.instance.element).closest(".CR-groups").children(":first")
            // $main.css("color", "red")
            let top = $main.offset().top;
            let left = $main.offset().left;
            if (
                this.positionAbs.top + this.offset.click.top >= top
                && this.positionAbs.top + this.offset.click.top <= top + $main.height()
                && this.positionAbs.left + this.offset.click.left >= left
                && this.positionAbs.left + this.offset.click.left <= left + $main.width()
            ) {
              return false;
            } else {
              return $.ui.sortable.prototype._intersectsWithPointer.apply(this, arguments);
            }
          } else {
            return $.ui.sortable.prototype._intersectsWithPointer.apply(this, arguments);
          }


//This line....
//                     if (!item.instance.element.hasClass("main-list") && this.positionAbs.top + this.offset.click.top < $(window).scrollTop() + 87) {
//                         return false;
//                     }

        },
        _intersectsWith: function (containerCache) {
          // console.log(containerCache.sortable.element)
          if (!containerCache.sortable.element.hasClass("main-list")) {
            let $main = $(containerCache.sortable.element).closest(".CR-groups").children(":first")
            let top = $main.offset().top;
            let left = $main.offset().left;
            if (
                this.positionAbs.top + this.offset.click.top >= top
                && this.positionAbs.top + this.offset.click.top <= top + $main.height()
                && this.positionAbs.left + this.offset.click.left >= left
                && this.positionAbs.left + this.offset.click.left <= left + $main.width()
            ) {
              return false;
            } else {
              return $.ui.sortable.prototype._intersectsWith.apply(this, arguments);
            }
          } else {
            return $.ui.sortable.prototype._intersectsWith.apply(this, arguments);
          }

//Also this line....
//                     if (!containerCache.sortable.element.hasClass("main-list") && this.positionAbs.top + this.offset.click.top < $(window).scrollTop() + 87) {
//                         return false;
//                     }
          return $.ui.sortable.prototype._intersectsWith.apply(this, arguments);
        }
      });
    })(jQuery);

    function turn_on_touch() {
      // Turn on touch functionality
      // Detect touch support

      /*!
      * jQuery UI Touch Punch 0.2.3
      *
      * Copyright 2011–2014, Dave Furfero
      * Dual licensed under the MIT or GPL Version 2 licenses.
      *
      * Depends:
      *  jquery.ui.widget.js
      *  jquery.ui.mouse.js
      */
      $.support.touch = 'ontouchend' in document;

      // Ignore browsers without touch support
      if (!$.support.touch) {
        return;
      }

      var mouseProto = $.ui.mouse.prototype,
          _mouseInit = mouseProto._mouseInit,
          _mouseDestroy = mouseProto._mouseDestroy,
          touchHandled;

      /**
       * Simulate a mouse event based on a corresponding touch event
       * @param {Object} event A touch event
       * @param {String} simulatedType The corresponding mouse event
       */
      function simulateMouseEvent(event, simulatedType) {

        // Ignore multi-touch events
        if (event.originalEvent.touches.length > 1) {
          return;
        }

        event.preventDefault();

        var touch = event.originalEvent.changedTouches[0],
            simulatedEvent = document.createEvent('MouseEvents');

        // Initialize the simulated mouse event using the touch event's coordinates
        simulatedEvent.initMouseEvent(
            simulatedType,    // type
            true,             // bubbles
            true,             // cancelable
            window,           // view
            1,                // detail
            touch.screenX,    // screenX
            touch.screenY,    // screenY
            touch.clientX,    // clientX
            touch.clientY,    // clientY
            false,            // ctrlKey
            false,            // altKey
            false,            // shiftKey
            false,            // metaKey
            0,                // button
            null              // relatedTarget
        );

        // Dispatch the simulated event to the target element
        event.target.dispatchEvent(simulatedEvent);
      }

      /**
       * Handle the jQuery UI widget's touchstart events
       * @param {Object} event The widget element's touchstart event
       */
      mouseProto._touchStart = function (event) {

        var self = this;

        // Ignore the event if another widget is already being handled
        if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
          return;
        }

        // Set the flag to prevent other widgets from inheriting the touch event
        touchHandled = true;

        // Track movement to determine if interaction was a click
        self._touchMoved = false;

        // Simulate the mouseover event
        simulateMouseEvent(event, 'mouseover');

        // Simulate the mousemove event
        simulateMouseEvent(event, 'mousemove');

        // Simulate the mousedown event
        simulateMouseEvent(event, 'mousedown');
      };

      /**
       * Handle the jQuery UI widget's touchmove events
       * @param {Object} event The document's touchmove event
       */
      mouseProto._touchMove = function (event) {

        // Ignore event if not handled
        if (!touchHandled) {
          return;
        }

        // Interaction was not a click
        this._touchMoved = true;

        // Simulate the mousemove event
        simulateMouseEvent(event, 'mousemove');
      };

      /**
       * Handle the jQuery UI widget's touchend events
       * @param {Object} event The document's touchend event
       */
      mouseProto._touchEnd = function (event) {

        // Ignore event if not handled
        if (!touchHandled) {
          return;
        }

        // Simulate the mouseup event
        simulateMouseEvent(event, 'mouseup');

        // Simulate the mouseout event
        simulateMouseEvent(event, 'mouseout');

        // If the touch interaction did not move, it should trigger a click
        if (!this._touchMoved) {

          // Simulate the click event
          simulateMouseEvent(event, 'click');
        }

        // Unset the flag to allow other widgets to inherit the touch event
        touchHandled = false;
      };

      /**
       * A duck punch of the $.ui.mouse _mouseInit method to support touch events.
       * This method extends the widget with bound touch event handlers that
       * translate touch events to mouse events and pass them to the widget's
       * original mouse event handling methods.
       */
      mouseProto._mouseInit = function () {

        var self = this;

        // Delegate the touch handlers to the widget's element
        self.element.bind({
          touchstart: $.proxy(self, '_touchStart'),
          touchmove: $.proxy(self, '_touchMove'),
          touchend: $.proxy(self, '_touchEnd')
        });

        // Call the original $.ui.mouse init method
        _mouseInit.call(self);
      };

      /**
       * Remove the touch event handlers
       */
      mouseProto._mouseDestroy = function () {

        var self = this;

        // Delegate the touch handlers to the widget's element
        self.element.unbind({
          touchstart: $.proxy(self, '_touchStart'),
          touchmove: $.proxy(self, '_touchMove'),
          touchend: $.proxy(self, '_touchEnd')
        });

        // Call the original $.ui.mouse destroy method
        _mouseDestroy.call(self);
      };
    }

    turn_on_touch(); // Run the jquery ui touch code.


    // A global mapping between answerbox IDs and the CardSort widgets
    if (!window.CRidWidgetMap) {
      window.CRidWidgetMap = {};
      window.onresize = () => {
        Object.values(window.CRidWidgetMap).forEach(val => val.refreshUI());
      }
    }

    $.valHooks["div"] = {
      get: function (elt) {
        const $elt = $(elt);
        const widget = window.CRidWidgetMap[$elt.attr('id')];
        if (widget) {
          return widget.asJSON();
        } else {
          console.log("Called val on unrecognised div")
          return {}
        }
      }
    }
    $.valHooks["pre"] = {
      get: function (elt) {
        return $(elt).text()
      }
    }
    $.valHooks["h4"] = {
      get: function (elt) {
        return $(elt).text()
      }
    }
    $.valHooks["p"] = {
      get: function (elt) {
        return $(elt).text()
      }
    }

    /** Parses JSON to an object or returns an empty object if the string is not valid JSON */
    function parseJSON(aString) {
      try {
        return JSON.parse(aString)
      } catch (SyntaxError) {
        return {}
      }
    }

    const CardSort = function () {
      this.$preloadAnswerbox = $(document.getElementById("CR-preload-authoring-___textareaId___"));
      this.$answerAnswerbox = $(document.getElementById("CR-answer-authoring-___textareaId___"));
      this.$studentAnswerbox = $(document.getElementById("CR-student-answer-___textareaId___"));

      this.$answerbox = this.activeAnswerbox();
    }

    CardSort.prototype.init = function () {
      this.$answerbox.css("display", "flex");  // show the active answer
      this.setupHooks();
      this.setupFullscreenButton();

      this.load();

      this.fitCards();
      this.setupResetButton();
      this.setupAddGroupButton();
      this.setupScrollShadow();

      $(".CR-groups > .CR-group:first-child .CR-group-card-container", this.$answerbox)
          .addClass("main-list")

      this.makeSortable();
      this.setupDeleteCardButton();

      this.refreshUI();
    }

    CardSort.prototype.refreshUI = function () {
      this.setupInputs();
      this.setupDeleteGroupButton();
      this.setupAddCardButton();
      this.setupAddGroupButton();
      this.makeSortable();
      this.setupDeleteCardButton();
      this.fitCards();
      this.disableGrammarly();
      this.setTextAreaHeight();
      this.setupPreformatCheckbox();


      // Some changes take a second to update the window fully
      setTimeout(() => {
        // resets scroll shadow on change
        $(".CR-group-container", this.$answerbox).trigger("scroll");

        // Stops weird behaviour with the index (top left) gaining focus??? mostly???
        this.$answerbox
            .off("click")
            .on("click", function (e) {
              e.stopPropagation();
              e.preventDefault();
            })
      }, 150);
    }

    CardSort.prototype.makeSortable = function () {
      // Coderunner IDs break normal selectors
      let container = `*[id="${this.$answerbox.attr('id')}"] .CR-group-card-container`
      $(".CR-group-card-container", this.$answerbox)
          .fixedSortable({connectWith: container, cursor: "grabbing", tolerance: "pointer"});
      $(".CR-group-card-container", this.$answerbox)
          .disableSelection();
    }

    /** Adds name + coderunner-ui class to active answerbox + registers the
     * active answerbox's ID in the global id to widget map */
    CardSort.prototype.setupHooks = function () {
      this.$answerbox.addClass("coderunner-ui-element");
      this.$answerbox.attr("name", "cardsort");
      window.CRidWidgetMap[this.$answerbox.attr("id")] = this;
    }

    CardSort.prototype.load = function () {
      let data;
      if (this.isPreload()) {
        data = this.preloadJSON();
      } else {
        let preload = this.preloadJSON();
        data = this.isStudentAnswer() ? this.studentAnswerJSON() : this.answerAuthoringJSON();
        let preloadGroups = preload["groups"].map(it => it["title"]).sort();
        let dataGroups = data["groups"].map(it => it["title"]).sort();
        let groupsAreSame = preloadGroups.toString() === dataGroups.toString();

        let preloadCards = preload["groups"].flatMap(it => it["cards"]).map(it => JSON.stringify(it)).sort();
        let dataCards = data["groups"].flatMap(it => it["cards"]).map(it => JSON.stringify(it)).sort();
        let cardsAreSame = preloadCards.toString() === dataCards.toString();

        // TODO – Handle this better
        data = groupsAreSame && cardsAreSame ? data : preload;
      }
      for (const group of data["groups"]) {
        $(".CR-groups", this.$answerbox)
            .append(this.groupFromJSON(group));
      }

      let config = data["config"];
      $(".CR-group-order-checkbox-group :checkbox", this.$answerbox)
          .prop("checked", config["groupOrder"])

      $(".CR-group-width-input-group input", this.$answerbox)
          .val(config["groupWidth"])

      this.refreshUI();
    }

    CardSort.prototype.preloadJSON = function () {
      if (this.isStudentAnswer()) {
        // textareaid macro is prefixed with "id_" however reset button id does not include this prefix
        const buttonID = "___textareaId___".slice(3, -7) + "_-resetbutton";
        const btnElement = $(document.getElementById(buttonID));
        return parseJSON($(btnElement).attr('data-reload-text'))["cardsort"][0];
      } else {
        return parseJSON($(document.getElementById("id_answerpreload")).text())["cardsort"][0];
      }
    }

    CardSort.prototype.answerAuthoringJSON = function () {
      if (!this.isStudentAnswer()) {
        return parseJSON($(document.getElementById("id_answer")).text())["cardsort"][0];
      } else {
        return {}
      }
    }

    CardSort.prototype.studentAnswerJSON = function () {
      if (this.isStudentAnswer()) {
        return parseJSON($(document.getElementById("___textareaId___")).text())["cardsort"][0];
      } else {
        return {};
      }
    }

    /**
     * @returns {boolean} true if the current window is an answer preload
     */
    CardSort.prototype.isPreload = function () {
      // Don't know why this works – inspiration taken from Parsons example
      return this.$studentAnswerbox.closest(".preloadanswer").length > 0;
    };

    /**
     * @returns {boolean} true if the current window is the student answer
     */
    CardSort.prototype.isStudentAnswer = function () {
      // Don't know why this works – inspiration taken from Parsons example
      return this.$studentAnswerbox.closest(".que").length > 0;
    };

    /**
     * @returns {boolean} true is the current window is the answer authoring window
     */
    CardSort.prototype.isAnswerAuthoring = function () {
      return !this.isPreload() && !this.isStudentAnswer();
    };

    /**
     * @returns {jQuery} the root div of the active answer
     */
    CardSort.prototype.activeAnswerbox = function () {
      if (this.isPreload()) {
        return this.$preloadAnswerbox;
      } else if (this.isStudentAnswer()) {
        return this.$studentAnswerbox;
      } else {
        return this.$answerAnswerbox;
      }
    }

    CardSort.prototype.setupDeleteGroupButton = function () {
      let refresh = () => this.refreshUI();
      $(".CR-group .CR-delete-group", this.$answerbox)
          .off("click")
          .on("click", function () {
            let $group = $(this).closest(".CR-group");
            if ($(".CR-group-card-container > *", $group).length === 0) {
              $group.remove();
            } else {
              alert("Cannot delete non-empty group");
            }
            refresh();
            return false;
          })
    }

    CardSort.prototype.setupAddCardButton = function () {
      let refresh = () => this.refreshUI();
      let emptyCard = () => this.emptyCard();
      $(".CR-group .CR-add-card", this.$answerbox)
          .off("click")
          .on("click", function () {
            let $cardContainer = $(".CR-group-card-container", $(this).closest(".CR-group"));
            $cardContainer.append(emptyCard());
            refresh();
            return false;
          });
    }

    CardSort.prototype.setupDeleteCardButton = function () {
      let refresh = () => this.refreshUI();
      $(".CR-delete-card-button", this.$answerbox)
          .off("click")
          .on("click", function () {
            $(this).closest(".CR-card").remove();
            refresh();
            return false;
          });
    }

    /** Sets up the fullscreen button for the active answerbox */
    CardSort.prototype.setupFullscreenButton = function () {
      let refresh = () => this.refreshUI();
      $(".CR-cardsort-fullscreen-button", this.$answerbox)
          .on("click", function () {
            if (document.fullscreenElement) {
              if (document.exitFullscreen) {
                document.exitFullscreen();
              } else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
              }
            } else {
              const element = $(this).closest(".CR-answerbox")[0]
              if (element.requestFullscreen) {
                element.requestFullscreen();
              } else if (element.webkitRequestFullscreen) {
                element.webkitRequestFullscreen();
              }
            }
            refresh();
            return false;
          })
    }

    CardSort.prototype.setupResetButton = function () {
      // textareaid macro is prefixed with "id_" however reset button id does not include this prefix
      const buttonID = "___textareaId___".slice(3, -7) + "_-resetbutton";
      const btnElement = $(document.getElementById(buttonID));
      let refresh = () => this.refreshUI();
      $(btnElement).on('click', function () {
        const answer = document.getElementById('___textareaId___');
        $(answer).text($(this).attr('data-reload-text'));
        refresh();
        return false;
      })
    }

    CardSort.prototype.setupAddGroupButton = function () {
      // Todo – when dynamically selecting open vs closed sorts change this
      if (!this.isPreload()) {
        $(".CR-add-group-button", this.$answerbox)
            .remove();
        return;
      }

      let $groups = $(".CR-groups", this.$answerbox)
      let refresh = () => this.refreshUI();
      let emptyGroup = () => this.emptyGroup();
      $(".CR-add-group-button", this.$answerbox)
          .off("click")
          .on("click", function () {
            $groups.append(emptyGroup());
            refresh();
            return false;
          })
    }

    CardSort.prototype.setupPreformatCheckbox = function () {
      let refresh = () => this.refreshUI();
      $(".CR-preformat-checkbox-group :checkbox, .CR-group-order-checkbox-group :checkbox", this.$answerbox)
          .off("click")
          .on("click", function (e) {
            refresh();
            e.stopPropagation();
          });  // for some reason this is needed for checkboxes to work.
    }

    CardSort.prototype.setupScrollShadow = function () {
      let $leftShadow = $(".CR-left-shadow", this.$answerbox);
      let $rightShadow = $(".CR-right-shadow", this.$answerbox);

      let $groupsArea = $(".CR-visible-groups-box", this.$answerbox);
      let $content = $(".CR-content", this.$answerbox)

      $(".CR-group-container", this.$answerbox)
          .off("scroll")
          .on("scroll", function () {
            let horizontalOffset = $content.width() - $groupsArea.width()
            let verticalOffset = $content.height() - $groupsArea.height()

            let maxScrollLeft = this.scrollWidth - this.clientWidth;
            let leftShadowSize = Math.min(30, $(this).scrollLeft());
            let rightShadowSize = -Math.min(30, maxScrollLeft - $(this).scrollLeft());
            $leftShadow
                .css("box-shadow", `inset ${leftShadowSize}px 0 30px -30px rgba(0, 0, 0, 0.6)`)
                .css("bottom", `${verticalOffset}px`);
            $rightShadow
                .css("box-shadow", `inset ${rightShadowSize}px 0 30px -30px rgba(0, 0, 0, 0.6)`)
                .css("right", `${horizontalOffset}px`)
                .css("bottom", `${verticalOffset}px`);
          })
          .trigger("scroll");
    }

    CardSort.prototype.setupInputs = function () {
      let setHeight = () => this.setTextAreaHeight();
      let setWidth = () => this.fitCards();
      $("textarea", this.$answerbox)
          .off("input click")
          .on("input click", function () {
            setWidth();
            setHeight();
            return false;
          });

      $("input", this.$answerbox)
          .off("click")
          .on("click", function () {
            setWidth();
            setHeight();
            return false;
          });
    }

    CardSort.prototype.fitCards = function () {
      let width = Math.max(
          ...(this.cardJSON()
              .filter(card => card["preformatted"])
              .map(card => card["prompt"])
              .flatMap(text => text.split(/\r?\n/))
              .map(line => line.length))
      );
      width = Math.max(this.configJSON()["groupWidth"], width + 5);
      $(".CR-group", this.$answerbox)
          .css("width", `${width}ch`);
      $(".CR-left-shadow", this.$answerbox)
          .css("left", `${width}ch`);
    }

    CardSort.prototype.setTextAreaHeight = function () {
      $(".CR-group-card-container textarea", this.$answerbox)
          .each(function () {
            if (this.clientHeight !== this.scrollHeight) {
              $(this).height(`${this.scrollHeight}px`);
            }
          })
    }

    CardSort.prototype.cardJSON = function () {
      return $(".CR-group .CR-card", this.$answerbox).map((i, c) => this.cardToJSON(c)).get()
    }

    CardSort.prototype.configJSON = function () {
      if (this.isPreload()) {
        return {
          "groupOrder": $(".CR-group-order-checkbox-group :checkbox", this.$answerbox).prop("checked"),
          "groupWidth": $(".CR-group-width-input-group input", this.$answerbox).val(),
        };
      } else {
        return {
          "groupOrder": this.preloadJSON()["config"]["groupOrder"],
          "groupWidth": this.preloadJSON()["config"]["groupWidth"],
        };
      }
    }

    /** Returns this card sort as a JSON object */
    CardSort.prototype.asJSON = function () {
      return {
        "groups": $(".CR-group", this.$answerbox)
            .map((i, e) => this.groupToJSON(e)).get(),
        "config": this.configJSON(),
      };
    }

    CardSort.prototype.groupFromJSON = function (groupJSON) {
      let $group = $(`<div class="CR-group"></div>`);
      let $headerBar = $(`<div class="CR-group-header-bar"></div>`);
      let $cardContainer = $(`<div class="CR-group-card-container"></div>`);
      $group.append($headerBar);
      $group.append($cardContainer);

      if (this.isPreload()) {
        $headerBar.append(`<input class="CR-group-title" value="${groupJSON["title"]}"/>`);
        $headerBar.append(`<button class="CR-add-card">Add Card</button>`);
        $headerBar.append(`<button class="CR-delete-group">Delete</button>`);
      } else {
        $headerBar.append(`<h4 class="CR-group-title">${groupJSON["title"]}</h4>`);
      }

      let cards = groupJSON["cards"];
      for (const card of cards) {
        $cardContainer.append(this.cardFromJSON(card));
      }

      return $group;
    }

    CardSort.prototype.groupToJSON = function (group) {
      return {
        "title": $(".CR-group-title", group).val(),
        "cards": $(".CR-group-card-container .CR-card", group)
            .map((i, e) => this.cardToJSON(e)).get(),
      }
    }

    CardSort.prototype.emptyGroup = function () {
      return this.groupFromJSON({"title": "", "cards": []})
    }

    CardSort.prototype.cardFromJSON = function (cardJSON) {
      let $card = $(`<div class="CR-card"></div>`);
      if (this.isPreload()) {
        $card.append(`<textarea class="CR-prompt">${cardJSON["prompt"]}</textarea>`);
        let $cardButtons = $(`
                    <div class="CR-card-buttons">
                      <button class="CR-delete-card-button">Delete Card</button>
                      <div class="CR-preformat-checkbox-group">
                        <label>Preformatted</label>
                        <input name="preformat" type="checkbox"/>
                      </div>
                    </div>
                `);
        let $formatOption = $("input", $cardButtons);
        $formatOption.prop("checked", cardJSON["preformatted"]);
        $card.append($cardButtons);
      } else {
        $card.append(cardJSON["preformatted"]
            ? `<pre class="CR-prompt">${cardJSON["prompt"]}</pre>`
            : `<p class="CR-prompt">${cardJSON["prompt"]}</p>`
        )
      }
      return $card;
    }

    CardSort.prototype.cardIsPreformatted = function (card) {
      return $(".CR-preformat-checkbox-group :checkbox", card).prop("checked")
          || $(".CR-prompt", card).is("pre");
    }

    CardSort.prototype.cardToJSON = function (card) {
      return {
        "prompt": $(".CR-prompt", card).val() || "",
        "preformatted": this.cardIsPreformatted(card),
      };
    }

    CardSort.prototype.emptyCard = function () {
      return this.cardFromJSON({"prompt": "", "preformatted": true});
    }

    CardSort.prototype.disableGrammarly = function () {
      $("textarea", this.$answerbox).attr("data-gramm", false);
    }

    function setup() {
      const cardSort = new CardSort();
      cardSort.init();
    }

    $(document).ready(setup);

  });
</script>

</body>
</html>
]]></prototypeextra>
    <testcases>
<file name="munkres.py" path="/" encoding="base64"></file>
    </testcases>
  </question>

</quiz>